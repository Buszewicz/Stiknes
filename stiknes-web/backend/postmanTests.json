{
  "info": {
    "name": "Notes API Testing",
    "description": "Complete test collection for Express Notes API with Prisma",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "noteId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Health check - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 'OK');",
              "    pm.expect(responseJson).to.have.property('message', 'API is running');",
              "});",
              "",
              "pm.test('Health check - Response time is less than 200ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create User - Valid Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"username\": \"johndoe\",\n    \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create user - Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Create user - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('email', 'john.doe@example.com');",
              "    pm.expect(responseJson).to.have.property('username', 'johndoe');",
              "    pm.expect(responseJson).to.have.property('createdAt');",
              "    pm.expect(responseJson).to.not.have.property('password');",
              "});",
              "",
              "pm.test('Create user - Store user ID for future tests', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.collectionVariables.set('userId', responseJson.id);",
              "});",
              "",
              "pm.test('Create user - Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create User - Invalid Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"invalid-email\",\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid email - Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Invalid email - Response contains validation errors', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('errors');",
              "    pm.expect(responseJson.errors).to.be.an('array');",
              "    pm.expect(responseJson.errors.length).to.be.greaterThan(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create User - Duplicate Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"username\": \"anotherjohn\",\n    \"password\": \"password456\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Duplicate email - Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Duplicate email - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'Email already exists');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Users",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users?page=1&limit=10",
          "host": ["{{baseUrl}}"],
          "path": ["users"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get all users - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Get all users - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('users');",
              "    pm.expect(responseJson).to.have.property('pagination');",
              "    pm.expect(responseJson.users).to.be.an('array');",
              "});",
              "",
              "pm.test('Get all users - Pagination structure is correct', function () {",
              "    const responseJson = pm.response.json();",
              "    const pagination = responseJson.pagination;",
              "    pm.expect(pagination).to.have.property('total');",
              "    pm.expect(pagination).to.have.property('page', 1);",
              "    pm.expect(pagination).to.have.property('limit', 10);",
              "    pm.expect(pagination).to.have.property('totalPages');",
              "});",
              "",
              "pm.test('Get all users - Users array contains expected data', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.users.length > 0) {",
              "        const user = responseJson.users[0];",
              "        pm.expect(user).to.have.property('id');",
              "        pm.expect(user).to.have.property('email');",
              "        pm.expect(user).to.have.property('_count');",
              "        pm.expect(user).to.not.have.property('password');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get user by ID - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Get user by ID - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('email');",
              "    pm.expect(responseJson).to.have.property('username');",
              "    pm.expect(responseJson).to.have.property('notes');",
              "    pm.expect(responseJson.notes).to.be.an('array');",
              "    pm.expect(responseJson).to.not.have.property('password');",
              "});",
              "",
              "pm.test('Get user by ID - User ID matches requested ID', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.id).to.equal(pm.collectionVariables.get('userId'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User by ID - Not Found",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/99999",
          "host": ["{{baseUrl}}"],
          "path": ["users", "99999"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get user by ID not found - Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Get user by ID not found - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'User not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update User",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"username\": \"johndoe_updated\",\n    \"password\": \"newpassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Update user - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Update user - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('email');",
              "    pm.expect(responseJson).to.have.property('username', 'johndoe_updated');",
              "    pm.expect(responseJson).to.have.property('updatedAt');",
              "    pm.expect(responseJson).to.not.have.property('password');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Note - Valid Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"My First Note\",\n    \"content\": \"This is the content of my first note. It contains some important information.\",\n    \"userId\": {{userId}}\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/notes",
          "host": ["{{baseUrl}}"],
          "path": ["notes"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create note - Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Create note - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('title', 'My First Note');",
              "    pm.expect(responseJson).to.have.property('content');",
              "    pm.expect(responseJson).to.have.property('userId');",
              "    pm.expect(responseJson).to.have.property('user');",
              "    pm.expect(responseJson).to.have.property('createdAt');",
              "});",
              "",
              "pm.test('Create note - Store note ID for future tests', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.collectionVariables.set('noteId', responseJson.id.toString());",
              "});",
              "",
              "pm.test('Create note - User relationship is populated', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.user).to.have.property('id');",
              "    pm.expect(responseJson.user).to.have.property('email');",
              "    pm.expect(responseJson.user).to.not.have.property('password');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Note - Invalid User ID",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Invalid Note\",\n    \"content\": \"This note should fail\",\n    \"userId\": 99999\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/notes",
          "host": ["{{baseUrl}}"],
          "path": ["notes"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create note invalid user - Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Create note invalid user - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'User not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Notes",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/notes?page=1&limit=10",
          "host": ["{{baseUrl}}"],
          "path": ["notes"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get all notes - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Get all notes - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('notes');",
              "    pm.expect(responseJson).to.have.property('pagination');",
              "    pm.expect(responseJson.notes).to.be.an('array');",
              "});",
              "",
              "pm.test('Get all notes - Notes contain user information', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.notes.length > 0) {",
              "        const note = responseJson.notes[0];",
              "        pm.expect(note).to.have.property('id');",
              "        pm.expect(note).to.have.property('title');",
              "        pm.expect(note).to.have.property('user');",
              "        pm.expect(note.user).to.have.property('email');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Notes by User ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/notes?userId={{userId}}&page=1&limit=10",
          "host": ["{{baseUrl}}"],
          "path": ["notes"],
          "query": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get notes by user ID - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Get notes by user ID - All notes belong to specified user', function () {",
              "    const responseJson = pm.response.json();",
              "    const expectedUserId = pm.collectionVariables.get('userId');",
              "    responseJson.notes.forEach(note => {",
              "        pm.expect(note.userId).to.equal(expectedUserId);",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Note by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/notes/{{noteId}}",
          "host": ["{{baseUrl}}"],
          "path": ["notes", "{{noteId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get note by ID - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Get note by ID - Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('title');",
              "    pm.expect(responseJson).to.have.property('content');",
              "    pm.expect(responseJson).to.have.property('user');",
              "    pm.expect(responseJson.user).to.have.property('email');",
              "});",
              "",
              "pm.test('Get note by ID - Note ID matches requested ID', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.id.toString()).to.equal(pm.collectionVariables.get('noteId'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Note",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Updated Note Title\",\n    \"content\": \"This is the updated content of the note with more detailed information.\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/notes/{{noteId}}",
          "host": ["{{baseUrl}}"],
          "path": ["notes", "{{noteId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Update note - Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Update note - Response has updated data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('title', 'Updated Note Title');",
              "    pm.expect(responseJson.content).to.include('updated content');",
              "    pm.expect(responseJson).to.have.property('updatedAt');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Note",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/notes/{{noteId}}",
          "host": ["{{baseUrl}}"],
          "path": ["notes", "{{noteId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Delete note - Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Delete note - Response body is empty', function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Verify Note Deletion",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/notes/{{noteId}}",
          "host": ["{{baseUrl}}"],
          "path": ["notes", "{{noteId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Verify note deletion - Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Verify note deletion - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'Note not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete User (Cascade Test)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Delete user - Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Delete user - Response body is empty', function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Verify User Deletion",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Verify user deletion - Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Verify user deletion - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'User not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test 404 Route",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/nonexistent",
          "host": ["{{baseUrl}}"],
          "path": ["nonexistent"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('404 route - Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('404 route - Response contains error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error', 'Route not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}